package com.qa.ims.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.qa.ims.persistence.domain.Order;
import com.qa.ims.persistence.domain.Login;
import com.qa.ims.utils.DBUtils;
import com.qa.ims.utils.Utils;

public class OrderDAO implements Dao<Order>{
	
	public static final Logger LOGGER = LogManager.getLogger();
	private final Utils utils = new Utils();
	private final LoginDAO loginDAO = new LoginDAO();
	
	@Override
	public Order modelFromResultSet(ResultSet resultSet) throws SQLException{
		Long id = resultSet.getLong("id");
		String itemName = resultSet.getString("name");
		float itemPrice = resultSet.getFloat("price");
		int amount = resultSet.getInt("amount");
		boolean confirmed = resultSet.getBoolean("comfirmed");
		float totalCost = resultSet.getFloat("total");
		return new Order(id, itemName, itemPrice, amount, confirmed, totalCost);
	}
	
	@Override
	public List<Order> readAll(){
		LOGGER.info("Please sign in");
		LOGGER.info("Username");
		String username = utils.getString();
		LOGGER.info("Password");
		String password = utils.getString();
		Login log = loginDAO.read(username,password);
		if( log != null && log.getPrivilege().equals("admin")) {
			try (Connection connection = DBUtils.getInstance().getConnection();
					Statement statement = connection.createStatement();
					ResultSet resultSet = statement.executeQuery("SELECT orders.id, items.name, items.price, orders.amount, orders.confirmed, orders.amount*items.price AS total FROM orders INNER JOIN items ON orders.itemId = items.id;");){
				List<Order> orders = new ArrayList<>();
				while (resultSet.next()) {
					orders.add(modelFromResultSet(resultSet));
				}
				return orders;
			} catch (SQLException e) {
				LOGGER.debug(e);
				LOGGER.error(e.getMessage());
			}
		} else {
			LOGGER.info("You can only view your own orders");
			try (Connection connection = DBUtils.getInstance().getConnection();
					PreparedStatement statement = connection.prepareStatement("SELECT orders.id, items.name, items.price, orders.amount, orders.confirmed, orders.amount*items.price AS total "
							+ "FROM orders INNER JOIN items ON orders.itemId=items.id INNER JOIN customers cus ON orders.cusId=cus.id "
							+ "WHERE orders.cusId = 7");){
					statement.setLong(1, log.getId());
					ResultSet resultSet = statement.executeQuery();
				List<Order> orders = new ArrayList<>();
				while(resultSet.next()) {
					orders.add(modelFromResultSet(resultSet));
				}
				return orders;
			} catch (SQLException e) {
				LOGGER.debug(e);
				LOGGER.error(e.getMessage());
			}
		}
		return new ArrayList<>();
	}
	
	
	

}
