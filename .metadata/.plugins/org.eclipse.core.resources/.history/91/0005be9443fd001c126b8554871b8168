package com.qa.ims.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.qa.ims.persistence.domain.Customer;
import com.qa.ims.persistence.domain.Login;
import com.qa.ims.utils.DBUtils;
import com.qa.ims.utils.Utils;

public class LoginDAO implements Dao<Login> {
	
	public static final Logger LOGGER = LogManager.getLogger();
	private final Utils utils = new Utils();
	
	@Override
	public Login modelFromResultSet(ResultSet resultSet) throws SQLException{
		Long id = resultSet.getLong("id");
		String username = resultSet.getString("username");
		String password = resultSet.getString("password");
		Long cusId = resultSet.getLong("cusId");
		String privilege = resultSet.getString("privilege");
		return new Login(id, username, password,cusId,privilege);
	}
	
	@Override
	public List<Login> readAll(){
		LOGGER.info("Please sign in");
		LOGGER.info("Username");
		String username = utils.getString();
		LOGGER.info("Password");
		String password = utils.getString();
		Login log = read(username,password);
		if ( log != null && log.getPrivilege().equals("admin")) {
			try (Connection connection = DBUtils.getInstance().getConnection();
					Statement statement = connection.createStatement();
					ResultSet resultSet = statement.executeQuery("SELECT * FROM logins");) {
				List<Login> logins = new ArrayList<>();
				while (resultSet.next()) {
					logins.add(modelFromResultSet(resultSet));
				}
				return logins;
				
			} catch (SQLException e) {
				LOGGER.debug(e);
				LOGGER.error(e.getMessage());
			}
		}else {
			LOGGER.info("You do not have the correct privileges");
			try (Connection connection = DBUtils.getInstance().getConnection();
					PreparedStatement statement = connection.prepareStatement("SELECT * FROM logins WHERE id = ?");) {
					statement.setLong(1, log.getId());
					ResultSet resultSet = statement.executeQuery(); 
				List<Login> logins = new ArrayList<>();
				while (resultSet.next()) {
					logins.add(modelFromResultSet(resultSet));
				}
				return logins;
				
			} catch (SQLException e) {
				LOGGER.debug(e);
				LOGGER.error(e.getMessage());
			}
		}
		
		return new ArrayList<>();
	}
	
	public Login readLatest() {
		try (Connection connection = DBUtils.getInstance().getConnection();
				Statement statement = connection.createStatement();
				ResultSet resultSet = statement.executeQuery("SELECT * FROM logins ORDER BY id DESC LIMIT 1");) {
			resultSet.next();
			return modelFromResultSet(resultSet);
		} catch (Exception e) {
			LOGGER.debug(e);
			LOGGER.error(e.getMessage());
		}
		return null;
	}
	
	@Override
	public Login create(Login login) {
		try (Connection connection = DBUtils.getInstance().getConnection();
				PreparedStatement statement = connection
						.prepareStatement("INSERT INTO logins(username, password, cusId) VALUES (?, ?, ?)");) {
			statement.setString(1, login.getUsername());
			statement.setString(2, login.getPassword());
			statement.setLong(3, login.getCusId());
			statement.executeUpdate();
			return readLatest();
		} catch (Exception e) {
			LOGGER.debug(e);
			LOGGER.error(e.getMessage());
		}
		return null;
	}
	
	@Override
	public Login read(Long id) {
		try (Connection connection = DBUtils.getInstance().getConnection();
				PreparedStatement statement = connection.prepareStatement("SELECT * FROM login WHERE id = ?");) {
			statement.setLong(1, id);
			try (ResultSet resultSet = statement.executeQuery();) {
				resultSet.next();
				return modelFromResultSet(resultSet);
			}
		} catch (Exception e) {
			LOGGER.debug(e);
			LOGGER.error(e.getMessage());
		}
		return null;
	}
	
	public Login read(String username, String password) {
		try (Connection connection = DBUtils.getInstance().getConnection();
				PreparedStatement statement = connection.prepareStatement("SELECT * FROM logins WHERE username=?, password=?");) {
			statement.setString(1, username);
			statement.setString(2, password);
			try (ResultSet resultSet = statement.executeQuery();) {
				resultSet.next();
				return modelFromResultSet(resultSet);
			}
		} catch (Exception e) {
			LOGGER.debug(e);
			LOGGER.error(e.getMessage());
		}
		return null;
	}
	
	@Override
	public Login update(Login login) {
		try (Connection connection = DBUtils.getInstance().getConnection();
				PreparedStatement statement = connection
						.prepareStatement("UPDATE logins SET username = ?, password = ? WHERE id = ?");) {
			statement.setString(1, login.getUsername());
			statement.setString(2, login.getPassword());
			statement.setLong(3, login.getId());
			statement.executeUpdate();
			return read(login.getId());
		} catch (Exception e) {
			LOGGER.debug(e);
			LOGGER.error(e.getMessage());
		}
		return null;
	}
	
	@Override
	public int delete(long id) {
		try (Connection connection = DBUtils.getInstance().getConnection();
				PreparedStatement statement = connection.prepareStatement("DELETE FROM login WHERE id = ?");) {
			statement.setLong(1, id);
			return statement.executeUpdate();
		} catch (Exception e) {
			LOGGER.debug(e);
			LOGGER.error(e.getMessage());
		}
		return 0;
	}

}
